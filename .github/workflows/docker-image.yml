name: Docker Image CI

on:
  push:
    branches: ["main"]
    tags: ["v[0-9].[0-9]+.[0-9]+"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: |
            linux/amd64
            linux/arm64

      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - run: echo "FULL_IMAGE_TAG=$(git describe --tags --always)" >> $GITHUB_ENV

      - run: echo "IS_SAMVER_TAG=$(echo ${{ env.FULL_IMAGE_TAG }} | grep '^v[0-9]*\.[0-9]*\.[0-9]*$' -c)" >> $GITHUB_ENV

      - name: Create semver image tags
        if: ${{ env.IS_SAMVER_TAG == 1 }}
        run: |
          echo "MAJOR_IMAGE_TAG=$(echo ${{ env.FULL_IMAGE_TAG }} | cut -d . -f 1)" >> $GITHUB_ENV
          echo "MINOR_IMAGE_TAG=$(echo ${{ env.FULL_IMAGE_TAG }} | cut -d . -f 1,2)" >> $GITHUB_ENV

      - name: Setup rust cache
        uses: Swatinem/rust-cache@v2
        # with:
        # The prefix cache key, this can be changed to start a new cache manually.
        # default: "v0-rust"
        # prefix-key: ""

        # A cache key that is used instead of the automatic `job`-based key,
        # and is stable over multiple jobs.
        # default: empty
        # shared-key: ""

        # An additional cache key that is added alongside the automatic `job`-based
        # cache key and can be used to further differentiate jobs.
        # default: empty
        # key: ""

        # A whitespace separated list of env-var *prefixes* who's value contributes
        # to the environment cache key.
        # The env-vars are matched by *prefix*, so the default `RUST` var will
        # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
        # default: "CARGO CC CFLAGS CXX CMAKE RUST"
        # env-vars: ""

        # The cargo workspaces and target directory configuration.
        # These entries are separated by newlines and have the form
        # `$workspace -> $target`. The `$target` part is treated as a directory
        # relative to the `$workspace` and defaults to "target" if not explicitly given.
        # default: ". -> target"
        # workspaces: ""

        # Additional non workspace directories to be cached, separated by newlines.
        # cache-directories: ""

        # Determines whether workspace `target` directories are cached.
        # If `false`, only the cargo registry will be cached.
        # default: "true"
        # cache-targets: ""

        # Determines if the cache should be saved even when the workflow has failed.
        # default: "false"
        # cache-on-failure: ""

        # Determines which crates are cached.
        # If `true` all crates will be cached, otherwise only dependent crates will be cached.
        # Useful if additional crates are used for CI tooling.
        # default: "false"
        # cache-all-crates: ""

        # Determiners whether the cache should be saved.
        # If `false`, the cache is only restored.
        # Useful for jobs where the matrix is additive e.g. additional Cargo features,
        # or when only runs from `master` should be saved to the cache.
        # default: "true"
        # save-if: ""
        # To only cache runs from `master`:
        # save-if: ${{ github.ref == 'refs/heads/master' }}

        # Specifies what to use as the backend providing cache
        # Can be set to either "github" or "buildjet"
        # default: "github"
        # cache-provider: ""

      - name: Install cross
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          cargo binstall cross --no-confirm

      - name: Compile
        run: |
          cross build --target x86_64-unknown-linux-gnu --release
          cross build --target aarch64-unknown-linux-gnu --release

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: .
          push: true
          tags: |
            ghcr.io/washed/pv-inv-bridge:latest
            ghcr.io/washed/pv-inv-bridge:${{ env.FULL_IMAGE_TAG }}
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push additional semver images
        uses: docker/build-push-action@v5
        if: ${{ env.IS_SAMVER_TAG == 1 }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          context: .
          push: true
          tags: |
            ghcr.io/washed/pv-inv-bridge:${{ env.MAJOR_IMAGE_TAG }}
            ghcr.io/washed/pv-inv-bridge:${{ env.MINOR_IMAGE_TAG }}
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max